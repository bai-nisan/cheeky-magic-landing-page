---
alwaysApply: false
---
# Magic Landing Page Development Guide

## Project Overview

This is a Next.js 15.3.5 landing page template built with modern React patterns, featuring:
- **Framework**: Next.js 15 with App Router architecture
- **React**: Version 19.1.0 with latest features
- **Styling**: Tailwind CSS v4 with custom animations and design system
- **Components**: Shadcn/ui (New York style) + Magic UI animation components
- **TypeScript**: Strict configuration with path aliases
- **Theme**: Dark-first design with next-themes provider
- **Chat Demo**: Interactive AX (Agentic Experience) demonstration with strategic AI recommendations
- **Analytics Integration**: Real-time reasoning engine showing decision framework and context learning

## Architecture & File Structure

### Route Groups
```
app/
├── (marketing)/          # Public marketing pages
│   ├── page.tsx         # Landing page
│   └── layout.tsx       # Marketing layout
├── (auth)/              # Authentication pages
│   ├── login/page.tsx
│   ├── signin/page.tsx
│   └── signup/page.tsx
├── layout.tsx           # Root layout
└── globals.css          # Global styles
```

### Component Organization
```
components/
├── landing/             # Landing page sections
│   ├── hero-section.tsx
│   ├── client-section.tsx
│   ├── pricing-section.tsx
│   └── cta-section.tsx
├── magicui/            # Animated UI components
│   ├── particles.tsx
│   ├── border-beam.tsx
│   ├── text-shimmer.tsx
│   └── sphere-mask.tsx
├── ui/                 # Shadcn/ui base components
│   ├── chat.tsx        # Main chat container components
│   ├── message-list.tsx # Message rendering and scrolling
│   ├── sidebar.tsx     # Collapsible sidebar component
│   └── data-analysis-panel.tsx # Analytics reasoning display
├── chat-demo.tsx       # Main chat demo orchestrator
├── chat-interface.tsx  # Chat interface wrapper
├── data-analysis-panel.tsx # Strategic reasoning sidebar
└── site-*.tsx          # Site-wide components (header, footer, banner)
```

## Chat Demo & AX Implementation

### Agentic Experience (AX) Principles

The chat demo implements **Agentic Experience** rather than traditional UX patterns:

#### Core AX Patterns
- **Relationship Building**: Context accumulation over time, not stateless interactions
- **Trust Gradient**: Progressive confidence and transparency levels
- **Strategic Partnership**: AI acts as expert teammate, not just tool
- **Domain Expertise**: Embedded optimization guidelines and reasoning

#### Chat vs Analytics Split
- **Chat Interface**: Action-oriented recommendations with strategic reasoning
- **Analytics Sidebar**: Decision framework and reasoning engine behind recommendations

### Chat Demo Architecture

#### Container Hierarchy (Critical for Scrolling)
```tsx
ChatInterface (min-h-0, overflow-hidden)
  ↓
ChatContainer (h-full, flex-col, overflow-hidden) 
  ↓
ChatMessages (h-full, overflow-hidden)
  ↓  
MessageList (overflow-y-auto) ← Handles actual scrolling
```

#### Key Components

**ChatDemo Component:**
- Orchestrates the entire demo flow
- Manages step progression and state
- Coordinates between chat and analytics

**ChatInterface Component:**
- Wrapper for the chat experience
- Handles scrolling container setup
- Manages demo flow integration

**MessageList Component:**
- Implements scrollable message display
- Handles markdown-style formatting
- Removes emojis and applies clean styling
- Uses proper height constraints for scrolling

### Message Content Patterns

#### Content Transformation (AX Focus)
```tsx
// BEFORE (Tool-like): Generic status updates
"✅ Meta Ads: Connected and analyzing performance"

// AFTER (AX): Strategic action items
"**Priority Action Items:**
**1. Reallocate Budget to Brand Campaigns (+25%)**
   • Current Brand CPA: ₪216 vs Generic: ₪747
   • Expected impact: +15 conversions, -₪312 weekly cost
   • Confidence: High (99.25% impression share)"
```

#### Message Formatting Standards
- **Bold Text**: Use `**text**` markdown syntax
- **Bullet Points**: Use `•` for consistent formatting
- **No Emojis**: Clean, professional appearance
- **Structured Content**: Clear hierarchy with headers and sections

#### MessageContent Component Pattern
```tsx
function MessageContent({ content }: { content: string }) {
  // Split on markdown bold patterns
  const parts = content.split(/(\*\*.*?\*\*)/g);
  
  return (
    <div className="space-y-3">
      {parts.map((part, index) => {
        if (part.startsWith("**") && part.endsWith("**")) {
          return <strong key={index}>{text}</strong>;
        }
        // Handle bullet points and regular content
      })}
    </div>
  );
}
```

### Analytics Panel Architecture

#### Strategic Reasoning Sections
1. **Decision Framework**: Shows methodology (marginal cost optimization)
2. **Performance Hierarchy**: Campaign ranking with purchase intent analysis  
3. **Strategic Context**: Accumulated business rules and seasonal factors
4. **Confidence & Risk**: Transparency into decision quality

#### Trust Building Elements
```tsx
// Context Learning Display
{showImprovedRecommendation ? (
  <span className="text-foreground">
    <strong>Learned:</strong> Valentine's Day = gift purchase priority
  </span>
) : (
  <span className="text-muted-foreground">
    Seasonal factor: Valentine's Day (+40% gift searches)
  </span>
)}
```

### Scrolling Implementation

#### Critical Requirements
- **Height Constraints**: Each container must have `min-h-0` or `h-full`
- **Overflow Handling**: Parent containers use `overflow-hidden`, scroll container uses `overflow-y-auto`
- **Flex Layout**: Proper flex-1 and flex-col setup throughout hierarchy

#### Common Scrolling Issues
```tsx
// ❌ WRONG: Missing height constraints
<div className="flex-1">
  <div className="overflow-y-auto">Messages</div>
</div>

// ✅ CORRECT: Proper height flow
<div className="flex-1 h-full min-h-0 overflow-hidden">
  <div className="flex-1 overflow-y-auto">Messages</div>
</div>
```

### UI Consistency Standards

#### Chat Bubbles
- **User Messages**: `rounded-lg` bubbles with primary background
- **AI Messages**: No bubble, blend with background
- **System Messages**: Yellow background with border

#### Spacing & Typography
- **Container Padding**: `px-8 py-6` for consistent spacing
- **Message Spacing**: `space-y-8` between messages
- **Line Height**: `leading-relaxed` for readability

### Demo Flow Patterns

#### State Management
- Use `useDemoFlow` hook for step progression
- Coordinate timing between chat and analytics
- Handle auto-progression without user interaction

#### AX-Specific States
- **Context Learning**: Show knowledge accumulation
- **Trust Calibration**: Display confidence changes
- **Relationship Building**: Demonstrate progressive partnership

### Development Guidelines

#### Adding New AX Features
1. **Start with Strategic Value**: What business insight does this provide?
2. **Show Reasoning**: Always display why, not just what
3. **Build Context**: How does this accumulate knowledge?
4. **Demonstrate Trust**: How does confidence evolve?

#### Testing AX Components
- **Relationship Progression**: Does trust build over interactions?
- **Context Accumulation**: Is learning visible and persistent?
- **Strategic Value**: Do recommendations feel expert-level?
- **Professional Appearance**: Clean, emoji-free, well-formatted

---

## Development Patterns & Best Practices

### Import Conventions
Always use path aliases with `@/` prefix:
```tsx
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import HeroSection from "@/components/landing/hero-section";
```

### Component Patterns

#### Server vs Client Components
- **Default**: Server components (no "use client")
- **Client components**: Add `"use client"` directive when using:
  - React hooks (useState, useEffect, useRef)
  - Event handlers
  - Browser APIs
  - Framer Motion animations

#### Styling with Tailwind + cn()
Always use the `cn()` utility for className merging:
```tsx
import { cn } from "@/lib/utils";

className={cn(
  "base-classes",
  "conditional-classes",
  props.className
)}
```

#### Animation Patterns
- **CSS Variables**: Use `--animation-delay` for staggered animations
- **Framer Motion**: For complex interactions and view-based animations
- **Magic UI**: For specialized effects (particles, beams, shimmer)

```tsx
// Staggered animation example
className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:400ms]"
```

### TypeScript Configuration
- **Strict mode**: Enabled with comprehensive type checking
- **Path mapping**: `@/*` resolves to project root
- **Target**: ES2017 for broad compatibility

### Styling Guidelines

#### Design System
- **Base**: Tailwind CSS v4 with custom theme
- **Colors**: CSS variable-based design tokens
- **Typography**: Inter font with font-sans variable
- **Dark Mode**: Default theme with class-based switching

#### Custom CSS Variables
```css
--navigation-height: 3.5rem;
--radius-lg: var(--radius);
--animate-fade-in: fade-in 1000ms var(--animation-delay, 0ms) ease forwards;
```

#### Responsive Design
Follow mobile-first approach:
```tsx
className="text-5xl sm:text-6xl md:text-7xl lg:text-8xl"
```

### Form Handling
Use react-hook-form + zod for validation:
```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
```

### Icons & Assets
- **Primary**: Radix UI icons (`@radix-ui/react-icons`)
- **Secondary**: Lucide React (`lucide-react`)
- **Images**: Store in `/public` directory

## Component Development Standards

### Landing Page Sections
Each section should:
1. Be a default export function
2. Use semantic HTML5 elements
3. Include proper TypeScript types
4. Follow responsive design patterns
5. Use consistent spacing/layout classes

### Magic UI Components
- Import from `@/components/magicui/`
- Configure via props (quantity, ease, size, etc.)
- Position with absolute/relative classes
- Use z-index appropriately (-z-10 for backgrounds)

### Authentication Pages
- Include proper metadata exports
- Use consistent layout patterns
- Include navigation back to home
- Follow accessibility guidelines

## Performance & Optimization

### Image Optimization
```tsx
// Use Next.js Image component
import Image from "next/image";

// For hero images, consider:
alt="Descriptive text"
priority={true}  // For above-the-fold images
```

### Animation Performance
- Use `transform` and `opacity` for animations
- Prefer CSS animations over JavaScript
- Use `will-change` sparingly
- Implement proper `useInView` for scroll animations

### Bundle Optimization
- Tree-shake unused components
- Use dynamic imports for heavy components
- Optimize Magic UI component imports

## Development Workflow

### Running the Project
```bash
npm install --legacy-peer-deps  # Handle React 19 peer deps
npm run dev                     # Start development server
npm run build                   # Production build
npm run lint                    # ESLint checking
```

### Adding New Components
1. Create in appropriate directory (`ui/`, `landing/`, `magicui/`)
2. Follow TypeScript strict patterns
3. Export as default function
4. Include proper props interface
5. Add to main page imports

### Theming
- Default: Dark theme
- Provider: `ThemeProvider` in root layout
- Toggle: Use `next-themes` hook
- CSS: Design tokens via CSS variables

### State Management
- **Forms**: react-hook-form
- **Theme**: next-themes context
- **Local state**: React hooks
- **Server state**: Next.js built-in patterns

## Testing & Quality

### Code Quality
- ESLint configuration included
- TypeScript strict mode enabled
- Import organization standards
- Consistent naming conventions

### Browser Support
- Modern browsers (ES2017+)
- Mobile-responsive design
- Touch interaction support
- Accessibility considerations

## Deployment Considerations

### Environment
- Node.js compatible with Next.js 15
- Static asset optimization
- Environment variable patterns
- Build output optimization

### Performance
- Image optimization enabled
- CSS optimization via Tailwind
- Bundle splitting configured
- Server-side rendering optimized

## Key Files Reference

### Core Application
- **Main Layout**: [app/layout.tsx](mdc:app/layout.tsx)
- **Landing Page**: [app/(marketing)/page.tsx](mdc:app/(marketing)/page.tsx)
- **Utils**: [lib/utils.ts](mdc:lib/utils.ts)
- **Components Config**: [components.json](mdc:components.json)
- **TypeScript Config**: [tsconfig.json](mdc:tsconfig.json)
- **Package Config**: [package.json](mdc:package.json)
- **Global Styles**: [app/globals.css](mdc:app/globals.css)

### Chat Demo & AX Implementation
- **Chat Demo Orchestrator**: [components/chat-demo.tsx](mdc:components/chat-demo.tsx)
- **Chat Interface**: [components/chat-interface.tsx](mdc:components/chat-interface.tsx)
- **Analytics Panel**: [components/data-analysis-panel.tsx](mdc:components/data-analysis-panel.tsx)
- **Message List**: [components/ui/message-list.tsx](mdc:components/ui/message-list.tsx)
- **Chat Components**: [components/ui/chat.tsx](mdc:components/ui/chat.tsx)
- **Demo Flow Hook**: [hooks/use-chat-demo.ts](mdc:hooks/use-chat-demo.ts)
- **Demo State Hook**: [hooks/use-demo-flow.ts](mdc:hooks/use-demo-flow.ts)
- **Workflow Types**: [types/workflow.ts](mdc:types/workflow.ts)

---

This guide ensures consistent development patterns and optimal performance for the Magic Landing Page project. Follow these conventions for maintainable, scalable code.